// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packets/packetsummary.proto

package packets

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Main PacketSummary protobuf
type PacketSummaryMessage struct {
	CapID                uint32   `protobuf:"varint,1,opt,name=CapID,proto3" json:"CapID,omitempty"`
	SrcIP                uint32   `protobuf:"varint,2,opt,name=SrcIP,proto3" json:"SrcIP,omitempty"`
	SrcMac               uint32   `protobuf:"varint,3,opt,name=SrcMac,proto3" json:"SrcMac,omitempty"`
	DstIP                uint32   `protobuf:"varint,4,opt,name=DstIP,proto3" json:"DstIP,omitempty"`
	DstMac               uint32   `protobuf:"varint,5,opt,name=DstMac,proto3" json:"DstMac,omitempty"`
	TTL                  uint32   `protobuf:"varint,6,opt,name=TTL,proto3" json:"TTL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PacketSummaryMessage) Reset()         { *m = PacketSummaryMessage{} }
func (m *PacketSummaryMessage) String() string { return proto.CompactTextString(m) }
func (*PacketSummaryMessage) ProtoMessage()    {}
func (*PacketSummaryMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_be02d04ed30f7004, []int{0}
}

func (m *PacketSummaryMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketSummaryMessage.Unmarshal(m, b)
}
func (m *PacketSummaryMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketSummaryMessage.Marshal(b, m, deterministic)
}
func (m *PacketSummaryMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketSummaryMessage.Merge(m, src)
}
func (m *PacketSummaryMessage) XXX_Size() int {
	return xxx_messageInfo_PacketSummaryMessage.Size(m)
}
func (m *PacketSummaryMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketSummaryMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PacketSummaryMessage proto.InternalMessageInfo

func (m *PacketSummaryMessage) GetCapID() uint32 {
	if m != nil {
		return m.CapID
	}
	return 0
}

func (m *PacketSummaryMessage) GetSrcIP() uint32 {
	if m != nil {
		return m.SrcIP
	}
	return 0
}

func (m *PacketSummaryMessage) GetSrcMac() uint32 {
	if m != nil {
		return m.SrcMac
	}
	return 0
}

func (m *PacketSummaryMessage) GetDstIP() uint32 {
	if m != nil {
		return m.DstIP
	}
	return 0
}

func (m *PacketSummaryMessage) GetDstMac() uint32 {
	if m != nil {
		return m.DstMac
	}
	return 0
}

func (m *PacketSummaryMessage) GetTTL() uint32 {
	if m != nil {
		return m.TTL
	}
	return 0
}

// Request to Register a New Capturepoint
type RegisterCapturePoint struct {
	CollectorID          string   `protobuf:"bytes,1,opt,name=CollectorID,proto3" json:"CollectorID,omitempty"`
	Netaddr              uint32   `protobuf:"varint,2,opt,name=Netaddr,proto3" json:"Netaddr,omitempty"`
	Netmask              uint32   `protobuf:"varint,3,opt,name=Netmask,proto3" json:"Netmask,omitempty"`
	NicName              string   `protobuf:"bytes,4,opt,name=NicName,proto3" json:"NicName,omitempty"`
	DefaultGateway       uint32   `protobuf:"varint,5,opt,name=DefaultGateway,proto3" json:"DefaultGateway,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterCapturePoint) Reset()         { *m = RegisterCapturePoint{} }
func (m *RegisterCapturePoint) String() string { return proto.CompactTextString(m) }
func (*RegisterCapturePoint) ProtoMessage()    {}
func (*RegisterCapturePoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_be02d04ed30f7004, []int{1}
}

func (m *RegisterCapturePoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterCapturePoint.Unmarshal(m, b)
}
func (m *RegisterCapturePoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterCapturePoint.Marshal(b, m, deterministic)
}
func (m *RegisterCapturePoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterCapturePoint.Merge(m, src)
}
func (m *RegisterCapturePoint) XXX_Size() int {
	return xxx_messageInfo_RegisterCapturePoint.Size(m)
}
func (m *RegisterCapturePoint) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterCapturePoint.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterCapturePoint proto.InternalMessageInfo

func (m *RegisterCapturePoint) GetCollectorID() string {
	if m != nil {
		return m.CollectorID
	}
	return ""
}

func (m *RegisterCapturePoint) GetNetaddr() uint32 {
	if m != nil {
		return m.Netaddr
	}
	return 0
}

func (m *RegisterCapturePoint) GetNetmask() uint32 {
	if m != nil {
		return m.Netmask
	}
	return 0
}

func (m *RegisterCapturePoint) GetNicName() string {
	if m != nil {
		return m.NicName
	}
	return ""
}

func (m *RegisterCapturePoint) GetDefaultGateway() uint32 {
	if m != nil {
		return m.DefaultGateway
	}
	return 0
}

type RegisterResponse struct {
	CaptureID            uint32   `protobuf:"varint,1,opt,name=CaptureID,proto3" json:"CaptureID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterResponse) Reset()         { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()    {}
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be02d04ed30f7004, []int{2}
}

func (m *RegisterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterResponse.Unmarshal(m, b)
}
func (m *RegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterResponse.Marshal(b, m, deterministic)
}
func (m *RegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterResponse.Merge(m, src)
}
func (m *RegisterResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterResponse.Size(m)
}
func (m *RegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterResponse proto.InternalMessageInfo

func (m *RegisterResponse) GetCaptureID() uint32 {
	if m != nil {
		return m.CaptureID
	}
	return 0
}

func init() {
	proto.RegisterType((*PacketSummaryMessage)(nil), "packets.PacketSummaryMessage")
	proto.RegisterType((*RegisterCapturePoint)(nil), "packets.RegisterCapturePoint")
	proto.RegisterType((*RegisterResponse)(nil), "packets.RegisterResponse")
}

func init() { proto.RegisterFile("packets/packetsummary.proto", fileDescriptor_be02d04ed30f7004) }

var fileDescriptor_be02d04ed30f7004 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xdd, 0x6e, 0xaa, 0x40,
	0x14, 0x85, 0xe5, 0x78, 0xc4, 0xb8, 0xcf, 0x4f, 0xcc, 0xc4, 0x18, 0xaa, 0x6d, 0x62, 0xb8, 0x68,
	0xbc, 0xc2, 0xa6, 0x7d, 0x04, 0x68, 0x1a, 0x9a, 0x6a, 0x08, 0xfa, 0x02, 0x23, 0x6e, 0x09, 0x11,
	0x18, 0x32, 0x33, 0xa4, 0xf1, 0x55, 0x7a, 0xdb, 0xfb, 0x3e, 0x63, 0xc3, 0xcc, 0x50, 0xfb, 0xe3,
	0x15, 0xac, 0x6f, 0x2f, 0x76, 0x16, 0x7b, 0xc1, 0xb4, 0xa2, 0xc9, 0x01, 0xa5, 0x58, 0x98, 0x67,
	0x5d, 0x14, 0x94, 0x1f, 0xbd, 0x8a, 0x33, 0xc9, 0x48, 0xdf, 0xc0, 0xc9, 0x34, 0x65, 0x2c, 0xcd,
	0x71, 0xa1, 0xf0, 0xb6, 0xde, 0x2f, 0xb0, 0xa8, 0xa4, 0x71, 0xb9, 0x2f, 0x16, 0x8c, 0x22, 0x65,
	0x5c, 0xeb, 0xaf, 0x97, 0x28, 0x04, 0x4d, 0x91, 0x8c, 0xa0, 0xe7, 0xd3, 0x2a, 0x0c, 0x1c, 0x6b,
	0x66, 0xcd, 0xff, 0xc5, 0x5a, 0x34, 0x74, 0xcd, 0x93, 0x30, 0x72, 0x7e, 0x69, 0xaa, 0x04, 0x19,
	0x83, 0xbd, 0xe6, 0xc9, 0x92, 0x26, 0x4e, 0x57, 0x61, 0xa3, 0x1a, 0x77, 0x20, 0x64, 0x18, 0x39,
	0xbf, 0xb5, 0x5b, 0x89, 0xc6, 0x1d, 0x08, 0xd9, 0xb8, 0x7b, 0xda, 0xad, 0x15, 0x19, 0x42, 0x77,
	0xb3, 0x79, 0x72, 0x6c, 0x05, 0x9b, 0x57, 0xf7, 0xcd, 0x82, 0x51, 0x8c, 0x69, 0x26, 0x24, 0x72,
	0x9f, 0x56, 0xb2, 0xe6, 0x18, 0xb1, 0xac, 0x94, 0x64, 0x06, 0x7f, 0x7c, 0x96, 0xe7, 0x98, 0x48,
	0xc6, 0x4d, 0xc4, 0x41, 0xfc, 0x19, 0x11, 0x07, 0xfa, 0x2b, 0x94, 0x74, 0xb7, 0xe3, 0x26, 0x6a,
	0x2b, 0xcd, 0xa4, 0xa0, 0xe2, 0x60, 0xd2, 0xb6, 0x52, 0x4d, 0xb2, 0x64, 0x45, 0x0b, 0x54, 0x81,
	0x07, 0x71, 0x2b, 0xc9, 0x35, 0xfc, 0x0f, 0x70, 0x4f, 0xeb, 0x5c, 0x3e, 0x50, 0x89, 0xcf, 0xf4,
	0x68, 0xa2, 0x7f, 0xa3, 0xee, 0x0d, 0x0c, 0xdb, 0xbc, 0x31, 0x8a, 0x8a, 0x95, 0x02, 0xc9, 0x25,
	0x0c, 0x4c, 0xf6, 0x8f, 0x63, 0x9e, 0xc0, 0xed, 0xab, 0x05, 0x43, 0x7d, 0x7f, 0x93, 0x3e, 0x63,
	0x25, 0xf1, 0xc1, 0x0e, 0xcb, 0x14, 0x85, 0x24, 0x57, 0x9e, 0x69, 0xd1, 0x3b, 0x57, 0xd2, 0x64,
	0xec, 0xe9, 0x6e, 0xbd, 0xb6, 0x5b, 0xef, 0xbe, 0xe9, 0xd6, 0xed, 0xcc, 0x2d, 0xf2, 0x08, 0x7f,
	0xbf, 0xdc, 0xec, 0xb4, 0xea, 0xdc, 0x49, 0x27, 0x17, 0x3f, 0xc6, 0xed, 0x1f, 0xb8, 0x9d, 0xad,
	0xad, 0xf6, 0xdf, 0xbd, 0x07, 0x00, 0x00, 0xff, 0xff, 0xd3, 0xa6, 0x37, 0xc4, 0x71, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PacketCollectionClient is the client API for PacketCollection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PacketCollectionClient interface {
	// packetsummary ingest stream
	Ingest(ctx context.Context, opts ...grpc.CallOption) (PacketCollection_IngestClient, error)
	// Register a CapturePoint
	CapturePoint(ctx context.Context, in *RegisterCapturePoint, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type packetCollectionClient struct {
	cc *grpc.ClientConn
}

func NewPacketCollectionClient(cc *grpc.ClientConn) PacketCollectionClient {
	return &packetCollectionClient{cc}
}

func (c *packetCollectionClient) Ingest(ctx context.Context, opts ...grpc.CallOption) (PacketCollection_IngestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PacketCollection_serviceDesc.Streams[0], "/packets.PacketCollection/Ingest", opts...)
	if err != nil {
		return nil, err
	}
	x := &packetCollectionIngestClient{stream}
	return x, nil
}

type PacketCollection_IngestClient interface {
	Send(*PacketSummaryMessage) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type packetCollectionIngestClient struct {
	grpc.ClientStream
}

func (x *packetCollectionIngestClient) Send(m *PacketSummaryMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *packetCollectionIngestClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *packetCollectionClient) CapturePoint(ctx context.Context, in *RegisterCapturePoint, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/packets.PacketCollection/CapturePoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PacketCollectionServer is the server API for PacketCollection service.
type PacketCollectionServer interface {
	// packetsummary ingest stream
	Ingest(PacketCollection_IngestServer) error
	// Register a CapturePoint
	CapturePoint(context.Context, *RegisterCapturePoint) (*RegisterResponse, error)
}

// UnimplementedPacketCollectionServer can be embedded to have forward compatible implementations.
type UnimplementedPacketCollectionServer struct {
}

func (*UnimplementedPacketCollectionServer) Ingest(srv PacketCollection_IngestServer) error {
	return status.Errorf(codes.Unimplemented, "method Ingest not implemented")
}
func (*UnimplementedPacketCollectionServer) CapturePoint(ctx context.Context, req *RegisterCapturePoint) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CapturePoint not implemented")
}

func RegisterPacketCollectionServer(s *grpc.Server, srv PacketCollectionServer) {
	s.RegisterService(&_PacketCollection_serviceDesc, srv)
}

func _PacketCollection_Ingest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PacketCollectionServer).Ingest(&packetCollectionIngestServer{stream})
}

type PacketCollection_IngestServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*PacketSummaryMessage, error)
	grpc.ServerStream
}

type packetCollectionIngestServer struct {
	grpc.ServerStream
}

func (x *packetCollectionIngestServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *packetCollectionIngestServer) Recv() (*PacketSummaryMessage, error) {
	m := new(PacketSummaryMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PacketCollection_CapturePoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCapturePoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketCollectionServer).CapturePoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.PacketCollection/CapturePoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketCollectionServer).CapturePoint(ctx, req.(*RegisterCapturePoint))
	}
	return interceptor(ctx, in, info, handler)
}

var _PacketCollection_serviceDesc = grpc.ServiceDesc{
	ServiceName: "packets.PacketCollection",
	HandlerType: (*PacketCollectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CapturePoint",
			Handler:    _PacketCollection_CapturePoint_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ingest",
			Handler:       _PacketCollection_Ingest_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "packets/packetsummary.proto",
}
